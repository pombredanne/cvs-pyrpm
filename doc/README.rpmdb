RPM database internals
~~~~~~~~~~~~~~~~~~~~~~

This document describes the reverse engineered info from the various files in
/var/lib/rpm. All files are db4 files, either hash or btree based. With the
exception of Packages all files have the corresponding rpmtag based value as
key. The data consists of integer pairs which contain the package id and
the index at which this entry can be found in the rpm header of that tag. The
values are 4 byte integers in host byte order. For some tags the index doesn't
make any sense. In those cases the index value will always be set to 0.


First the list of files and their data:


Basenames (hash):
 key: Basename (string)
 values: list of 2-tuples: installid (4 byte int), basenameindex (4 byte int)

Conflictname (hash):
 key: Conflictname (string)
 values: list of 2-tuples: installid (4 byte int), conflictindex (4 byte int)

Dirnames (btree):
 key: Dirname (string)
 values: list of 2-tuples: installid (4 byte int), dirindex (4 byte int)

Filemd5s (hash):
 key: md5sum (4 * 4 byte int, no hex string!)
 values: list of 2-tuples: installid (4 byte int), filemd5sindex (4 byte int)
 Only stored if file md5sum exists and if the file is a regular file (usually
 equivalent)

Group (hash):
 key: Groupname (string)
 values: list of 2-tuples: installid (4 byte int), index (4 byte int) (always 0)

Installtid (btree):
 key: Installtime of transaction (4 byte int, time() value)
 values: list of 2-tuples: installid (4 byte int), index (4 byte int) (always 0)

Name (hash):
 key: Packagename (string)
 values: list of 2-tuples: installid (4 byte int), index (4 byte int) (always 0)

Packages (hash):
 key: Installid (4 byte int)
 values: Complete binary rpm header with some  additional information from
         signature without lead.

Providename (hash):
 key: Providename (string)
 values: list of 2-tuples: installid (4 byte int), providenameindex (4 byte int)

Provideversion (btree):
 key: Provideversion (string)
 values: list of 2-tuples: installid (4 byte int), provideversionindex (4 byte int)

Pubkeys (hash):
 key: ?
 values: ?

Requirename (hash):
 key: Requirename (string)
 values: list of 2-tuples: installid (4 byte int), requirenameindex (4 byte int)
 Only contains the requirenames of not install prereqs

Requireversion (btree):
 key: Requireversion (string)
 values: list of 2-tuples: installid (4 byte int), requireversionindex (4 byte int)

Sha1header (hash):
 key: Sha1header (string) (just as the value from the header)
 values: list of 2-tuples: installid (4 byte int), index (4 byte int) (always 0)

Sigmd5 (hash):
 key: md5sum from header (4 * 4 byte int)
 values: list of 2-tuples: installid (4 byte int), index (4 byte int) (always 0)

Triggername (hash):
 key: Triggername (string)
 values: list of 2-tuples: installid (4 byte int), triggerindex (4 byte int)
 Only contains the first entry for each name from a package


Example
~~~~~~~

Now an example of the connection between the package headers which are stored
in Packages and the rest of the files.

The connection between /var/lib/rpm/Packages and the other files looks like
this:

Package key(id) 5: requires: a (index 0)
	           requires: b (index 1)
        key(id) 8: requires: c (index 0)
                   requires: a (index 1)
                   requires: b (index 2)

Requirenames key(requirename) a: (5, 0), (8, 1)
                              b: (5, 1), (8, 2)
                              c: (8, 0)

That means the complete /var/lib/rpm files can be cross checked with
/var/lib/rpm/Packages and can be regenerated from that file as well.

An exception is Installtid. This db file contains as keys the TID which is a
unique time in seconds since 1970 that reflects a complete transaction. Every
header in Packages contains that TID as "installtid" tag. The values of the
Installtid db file are again pairs of integers with a package id as first
value and the second value always 0. Here a small example:

Package key(id) 5: installtid: 1000000
        key(id) 8: installtid: 1000000
        key(id) 6: installtid: 1234567
        key(id) 9: installtid: 1234567

Installtid key(tid) 1000000: (5, 0), (6, 0)
                    1234567: (6, 0), (9, 0)

As you can see it can happen that package ID's get reused, in our example 6.
This can happen if a package gets deleted and the ID "dropped". So there is
unfortunately no autoincrementing ID for the packages.
