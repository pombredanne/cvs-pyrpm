PyRPM
=====


Overview
--------

PyRPM is an experimental project to look at rpm package management. It is
a python module and a collection of scripts that provide similar functionality
as rpm, yum and co. It is written from ground up and is implemented only in
python. It mainly deals with rpm packages, the rpm database "rpmdb" in /var/lib/rpm,
comps.xml files and yum repositories (called repo data).

The reason for this project was to have a codebase with which we can test and
verify rpm, rpmdb and yum itself and experiment with new features and
implementations very quickly. Python is Red Hat's in-house defacto standard,
so using python to do rapid prototyping was only logical.

The code itself is still very small, about 9000-10000 lines of code. We're
constantly looking to improve the code, make it more production ready and 
remove duplicate functionality. Results from this project back to rpm and co
are very important for us to improve the current available Linux tools and
not rush with only adding another project for this.


Warning
-------

The PyRPM project is by no means meant to be a full replacement of rpm or yum.
In it's current state we feel confident that in general it won't break anything,
but the code isn't production quality yet.

The check scripts can be safely used as they won't modify anything on your
system, so feel free to use them at your convenience.

We personally have been using the yum replacement very extensively and even
used it to update our own systems, but that's not even remotely a guarantee
that it will work on your machine. It has only been run by a few people until
now.

Using it to set up buildroots on the other hand should be very safe as this
all happens in a very contained environment (sandbox principle).

Please let us know of any problems you encounter, if possible with some
reproducible testcases so we can figure out what might have happend.


Installation
------------

The newest source code is available from link:http://people.redhat.com/laroche/pyrpm/[http://people.redhat.com/laroche/pyrpm/].
We will setup a more permanent project place, mailinglist and wiki soon.

The easiest way to install PyRPM is by compiling the src.rpm and installing that.
In addition to standard python modules PyRPM depends on

 - libxml2-python to read xml files like the repo data from yum. Available from
   link:http://xmlsoft.org/[http://xmlsoft.org/].
 - pysqlite (which is installed as python-sqlite on Fedora Core) and sqlite from link:http://pysqlite.org/[http://pysqlite.org/]
   and link:http://sqlite.org/[http://sqlite.org/]
 - urlgrabber to download files via http and ftp
   from link:http://linux.duke.edu/projects/urlgrabber/[http://linux.duke.edu/projects/urlgrabber/]

All the above are part of the Fedora Core 4 or newer, you might have to add them yourself to older releases.


Whats in there
--------------

PyRPM comes with a small collection of scripts and the pyrpm module itself:

 pyrpmcheck:      Check rpms for various known problems
 pyrpmcheckrepo:  Simulate an install of a given system followed by an
                  update to the second repo or rpms
 pyrpmcreaterepo: Build the yum repodata, but using the pyrpm module
                  underneath instead of rpmlib
 pyrpmdb2rpmdb:   Convert a "old" pyrpm database to rpmdb using rpm itself.
                  Obsolete now with direct rpmdb support in pyrpm
 pyrpmdbverify:   Check the internal and possibly external consistency of a
                  rpmdb. See README.rpmdb for more info
 pyrpminstall:    Install, update and erase packages. Uses very similar command
                  line options as rpm
 pyrpmrandomizer: Given a repo tries to install and remove packages trying to
                  solve all unresolved deps along the way
 pyrpmrebuilddb:  Rebuilds a rpmdb, same as rpm --rebuilddb
 pyrpmspecinfo:   Spec file parser tool
 pyrpmyum:        A yum replacement, can use standard yum config files with
                  several nifty additional (and dangerous ;) features


Examples
--------

This section contains some examples that we commonly use here to test the code
and even use it for everyday buildroot setups.

Check some common problems with packages and interdependancies for FC Devel:
-------------------------------
pyrpmcheck /mnt/redhat/fedora/development/i386/Fedora/RPMS
-------------------------------

Check if an update from FC4 to FC Devel works or what problems come up:
-------------------------------
pyrpmcheckrepo -r /mnt/foo install /mnt/raid/fedora/4/i386/os/Fedora/RPMS update /mnt/raid/fedora/development/i386/Fedora/RPMS
-------------------------------

Check the rpmdb of the current system with internal cross checks
-------------------------------
pyrpmdbverify
-------------------------------

Same, but this time we use external rpms to verify against, too
-------------------------------
pyrpmdbverify /mnt/redhat/fedora/development/i386/Fedora/RPMS
-------------------------------

Run 10000 install and erase operations in the /mnt/build/test buildroot and
save the resulting output in /tmp/stresstest
-------------------------------
pyrpmrandomizer --servicehack -y -v -c fc3-updates-i386.conf -r /mnt/build/test 10000 >&/tmp/stresstest
-------------------------------

Install a full FC Devel in /mnt/build/fc-devel-i386 buildroot
-------------------------------
pyrpmyum -y -v -c fc-devel-i386.conf -r /mnt/build/fc-devel-i386 install "*"
-------------------------------

Update kdebase in /mnt/build/fc-devel-i386 buildroot to latest version,
resolving all dependancies
-------------------------------
pyrpmyum -y -v -c fc-devel-i386.conf -r /mnt/build/fc-devel-i386 update kdebase
-------------------------------

Same, only if we get some unresolvable problems try to remove packages that
don't fit automatically
-------------------------------
pyrpmyum -y -v --autoerase -c fc-devel-i386.conf -r /mnt/build/fc-devel-i386 update kdebase
-------------------------------

Make a dry-run of the above command to be sure that not everything gets
automatically deleted :)
-------------------------------
pyrpmyum -y -v --test --autoerase -c fc-devel-i386.conf -r /mnt/build/fc-devel-i386 update kdebase
-------------------------------

Remove glibc and all depending packages from our buildroot :)
-------------------------------
pyrpmyum -y -v -c fc-devel-i386.conf -r /mnt/build/fc-devel-i386 remove glibc
-------------------------------


Pointers to related projects
----------------------------

rpm is available from link:http://www.rpm.org/[http://www.rpm.org/] and
link:http://www.wraptastic.org/[http://www.wraptastic.org/].

yum is available from link:http://linux.duke.edu/projects/yum/[http://linux.duke.edu/projects/yum/]
with devel mailinglist at
link:https://lists.linux.duke.edu/mailman/listinfo/yum-devel/[https://lists.linux.duke.edu/mailman/listinfo/yum-devel/].

The new metadata for yum repositories (also named repodata) is discussed at
link:http://linux.duke.edu/projects/metadata/[http://linux.duke.edu/projects/metadata/].
It also includes the link:http://linux.duke.edu/projects/metadata/generate/[createrepo] tool.

urlgrabber is available from
link:http://linux.duke.edu/projects/urlgrabber[http://linux.duke.edu/projects/urlgrabber/].

repoview is available from
link:http://linux.duke.edu/projects/mini/repoview/[http://linux.duke.edu/projects/mini/repoview/].

rpmlint is checking for packaging errors. It is available at
link:http://people.mandriva.com/~flepied/projects/rpmlint/[http://people.mandriva.com/~flepied/projects/rpmlint/].

Smart is written in python and combines several different binary packaging
formats within one packaging tool. It is available at link:http://smartpm.org/[http://smartpm.org/].

up2date and rhnlib are the client software for link:http://rhn.redhat.com/[Red Hat Network] and can be
downloaded from link:http://download.fedora.redhat.com/pub/fedora/linux/core/development/SRPMS/[http://download.fedora.redhat.com/pub/fedora/linux/core/development/SRPMS/].

Anaconda is the Red Hat installation tool and can be downloaded at
link:http://elvis.redhat.com/anaconda/[http://elvis.redhat.com/anaconda/].

Conary has looked at rpm history and defines a new distribution format that enables
rollbacks and easier customization on the client side. Available at
link:http://www.rpath.com/[http://www.rpath.com/] and
link:http://wiki.conary.com/[http://wiki.conary.com/].

apt4rpm is adapting the Debian packaging tool to also work with rpm packages.
Available from link:http://apt4rpm.sourceforge.net/[http://apt4rpm.sourceforge.net/].


Detailed tool descriptions
--------------------------

In order to understand what each of the tools really does this section describes
the behaviour of the tools in more detail for each tool.


4.1 pyrpmcheck
--------------

There are currently 4 basic tests in pyrpmcheck. The first checks for all
packages if any two dirs differ in user/group/mode. The second check looks for
duplicate provides, meaning if 2 rpms provide the same thing. The third test
looks for dangling symlinks, that is, symlinks that point to nowhere. The
last check simply checks if any package names appear in the various given dirs.
This check is only useful for FC and FC-Extras, as there should be no overlap
there.


4.2 pyrpmcheckrepo
------------------

This tool should actually be renamed (and will so soon) to pyrpmcheckinstall as
that's what it does. What the tool does it to simulate an installation (just
like you could do with pyrpmyum --test) and then simulates an update to the
second set of rpms or repository. A typical test would be to use a FC-3
or FC-4 yum.conf repo as a install base and then use a FC-devel repo or
rpm tree as the update tree. The nice thing about the simulation is that it
doesn't actually perform the installation and so doesn't need any diskspace.
Additionally you can use the (undocumented ;)) option --arch where you can
specify and arch you like. The host arch doesn't matter for the simulation
as the whole code "thinks" it runs under arch. So simulated installs and updates
for all kinds of archs can be performed this way on one single machine.


4.3 pyrpmcreaterepo
-------------------

Here we've take the code from the original createrepo and replaced the rpmlib
based access to rpm headers with our code.


4.4 pyrpmdb2rpmdb
-----------------

As we didn't have rpmdb support in the beginning we had to use our "own"
database which only consisted of the binary rpm headers saved as files with
the NEVRA of the packages. This allowed easy manipulation of the database and
the headers were still readable and usable by rpm itself, so you could build
a rpmdb using those header files and the --justdb option of rpm. This has now
become obsolete with the full support of rpmdb.


4.5 pyrpmdbverify
-----------------

This tool actually really reads all DB4 files in /var/lib/rpm (or, if you
use the --dbpath option, in that directory) and tries to cross check the entries
with the rpm header that is found in /var/lib/rpm/Packages. The README.rpmdb
contains a lot more detail about the structure of rpmdb. Simply put we check
if for every entry in every file there is a corresponding entry in Packages
and vice versa. There are some exceptions and special cases, but all known ones
are handled correctly. The one check that is very unreliable is the SHA1 header
checksum tests as this test has to rely on a very specific ordering of the
rpm binary header and about the tags that appear in the original rpm. If those
assupmtions don't hold this checksum can't be computed correctly.


4.6 pyrpminstall
----------------

Simply put this tool allows you to install, update and erase rpms just like
you would with rpm itself. It supports most of the common options from rpm
and used the same syntax, too. As it's "only" rpm though there is no depresolver
in this tool, so if you have any missing dependencies you'll have to fiddle
them out yourself, just as you had to do with rpm.


4.7 pyrpmrandomizer
-------------------

This is our main stresstest tool. With it you can run literally thousands of
update and erase operations in a buildroot and after several days scan the
output for any problems. It works simply by alternating between trying to
select randomly one package from the repository and installing that and 
selecting a package from the installed ones and removing that, always trying
to resolve all missing dependencies and conflicts. There are several special
options which help circumvent some strange problems. The first is --servicehack
which simply changes /sbin/service to "exit 0" as especially some of the
postuninstall scripts really misbehave otherwise and you don't need any
services started or stopped in a buildroot anyway for testing. The second is
the --autoerase option which I'll describe a little more in detail for
pyrpmyum.


4.8 pyrpmrebuilddb
------------------

Ever had to use rpm --rebuilddb? Well, here is our version of it. It tries to
do the same thing as rpm where it takes /var/lib/rpm/Packages and rebuilds the
database with that information. The default path for the new db is ./rpmdb
so that your original one won't be overwritten.


4.9 pyrpmspecinfo
-----------------
As we often have to work with specfiles, too, we've written a small tool with
which we can extrace the different sections from a specfile in order to use
that info via pipe in other tools.


4.10 pyrpmyum
-------------

Our main workhorse and real puppy. This tool, as the name already suggests is
basically a yum replacement of sorts. It uses the same command line options as
yum and uses the same config files, too. It contains a complete depresolver
and allows complex installs, updates and erases from systems. We have used it
to install FC1 and then step by step update to FC1-updates, FC2, FC2-updates,
FC3, FC3-updates and finally FC4. Some of the updates need the --autoerase
option though because some dependencies just can't be met and packages need
to be removed in order to fulfill them. The autoerase option tries exactly
that by semi-intelligently selecting the package that needs to be removed in
order for the update to work properly without user intervention. For the
described update chain only about 6-7 packages were deleted up to FC3, and all
of them would have to be removed manually anyway. But a word of warning here:
The autoerase option might run amok if things go really wrong or you try to
update to a completely broken tree and would then try to remove almost all of
your packages. This has never happend for real trees for us, but just imagine
a broken repository and things could go really wrong. That's why this option
isn't directly listed in the help and should only be used for a --test run
or without the -y option where you get listed separately from the "normal"
transaction the packages that pyrpmyum would autoerase for you.


4.11 rpmdb2pyrpmdb
------------------

The counterpart to pyrpmdb2rpmdb, again rather obsolete like it's brother as
we now have real rpmdb support. What it actually does is it extracts all rpm
headers from /var/lib/rpm/Packages and then recreates proper rpm header files
and stores them as files in /var/lib/pyrpm/headers which can afterwards again
be used by rpm -ivh --justdb /var/lib/pyrpm/headers/* to generate a valid rpm
database again.

