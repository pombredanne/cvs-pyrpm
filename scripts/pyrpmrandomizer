#!/usr/bin/python
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Library General Public License as published by
# the Free Software Foundation; version 2 only
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
# Copyright 2004, 2005 Red Hat, Inc.
#
# Author: Phil Knirsch
#

import sys, os, random

PYRPMDIR = ".."
if not PYRPMDIR in sys.path:
    sys.path.append(PYRPMDIR)
from pyrpm import __version__
from pyrpm import *

def usage():
    print """
    Yum install and remove interative test
    pyrpmrandomizer [options] number of iterations

options:
    [-?, --help] [--version]
    [--quiet] [-v, --verbose] [-y]
    [-c CONFIGFILE] [--dbpath DIRECTORY] [-r, --root DIRECTORY]
    [-h, --hash] [--force] [--oldpackage] [--justdb] [--test]
    [--ignoresize] [--ignorearch] [--exactarch]
    [--noconflicts] [--fileconflicts]
    [--nodeps] [--nodigest] [--nosignature]
    [--noorder] [--noscripts] [--notriggers]
    [--autoerase] [--installpkgs="pkg1 pkg2 pkg2 ..."]

Warning: Some of the install-options are not evaluated yet"""


#
# Main program
#
def main():
    # Our yum worker object
    yum = RpmYum(rpmconfig)

    # Disabled fileconflicts per default in yum
    rpmconfig.nofileconflicts = 1

    # Default is to be a little verbose.
    rpmconfig.verbose = 1

    # Argument parsing
    args = parseYumOptions(sys.argv[1:], yum)
    if args == None:
        usage()
        return 1

    # Always use the same random sequence
    random.seed(12345)
    count = int(args[0])
    yum.setCommand("update")
    while count > 0:
        yum.processArgs([])
        resolver = yum.opresolver
        count -= 1
        if count % 2:
            pkglist = yum.repos[random.randrange(0, len(yum.repos))].getPkgList()
            pkg = pkglist[random.randrange(0, len(pkglist))]
            yum.setCommand("update")
            print "Updating package %s" % pkg.getNEVRA()
            resolver.update(pkg)
        else:
            pkglist = resolver.getList()
            pkg = pkglist[random.randrange(0, len(pkglist))]
            yum.setCommand("remove")
            print "Erasing package %s" % pkg.getNEVRA()
            resolver.erase(pkg)
        if not yum.runDepRes():
            continue
        yum.runCommand()

if __name__ == '__main__':
    run_main(main)

# vim:ts=4:sw=4:showmatch:expandtab
