#!/usr/bin/python
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Library General Public License as published by
# the Free Software Foundation; version 2 only
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
# Copyright 2004, 2005 Red Hat, Inc.
#
# Author: Phil Knirsch
#

import sys, os, getopt

PYRPMDIR = ".."
if not PYRPMDIR in sys.path:
    sys.path.append(PYRPMDIR)
from pyrpm import *
from pyrpm import __version__

def usage():
    print """
INSTALLING, UPGRADING, AND REMOVING PACKAGES using REPOS:
    pyrpmyum install [install-options] PACKAGE_FILE ...
    pyrpmyum groupinstall [install-options] PACKAGE_FILE ...
    pyrpmyum upgrade [install-options] PACKAGE_FILE ...
    pyrpmyum groupupgrade [install-options] PACKAGE_FILE ...
    pyrpmyum update [install-options] PACKAGE_FILE ...
    pyrpmyum groupupdate [install-options] PACKAGE_FILE ...
    pyrpmyum remove [install-options] PACKAGE_FILE ...
    pyrpmyum groupremove [install-options] PACKAGE_FILE ...

general options:
    [-?, --help] [--version]
    [--quiet] [-v, --verbose] [-y]
    [-c CONFIGFILE] [--dbpath DIRECTORY] [-r, --root DIRECTORY]

install-options:
    [-h, --hash] [--force] [--oldpackage] [--justdb] [--test]
    [--ignoresize] [--ignorearch] [--exactarch]
    [--noconflicts] [--nofileconflicts]
    [--nodeps] [--nodigest] [--nosignature]
    [--noorder] [--noscripts] [--notriggers]
    [--autoerase]

Warning: Some of the install-options are not evaluated yet
Warning: [group]remove doesn't work yet either, use pyrpminstall -e"""


#
# Main program
#

# Our yum worker object
yum = RpmYum()

# Argument parsing
try:
    opts, args = getopt.getopt(sys.argv[1:], "?vhc:r:y",
        ["help", "verbose",
         "hash", "version", "quiet", "dbpath=", "root=",
         "force", "ignoresize", "ignorearch", "exactarch", "justdb", "test",
         "noconflicts", "nofileconflicts", "nodeps", "nodigest", "nosignature",
         "noorder", "noscripts", "notriggers", "oldpackage", "autoerase"])
except getopt.error, e:
    print "Error parsing command list arguments: %s" % e
    usage()
    sys.exit(1)

# Argument handling
for (opt, val) in opts:
    if   opt in ['-?', "--help"]:
        usage()
        sys.exit(0)
    elif opt in ["-v", "--verbose"]:
        rpmconfig.verbose_level += 1
    elif opt in ["-r", "--root"]:
        rpmconfig.buildroot = val
    elif opt == "-c":
        conf = YumConf("3", rpmconfig.machine, buildarchtranslate[rpmconfig.machine], val)
        for key in conf.vars.keys():
            if key == "main":
                pass
            else:
                sec = conf[key]
                if not sec.has_key("baseurl"):
                    printError("%s: No baseurl for this section in conf file." % key)
                    sys.exit(1)
                baseurl = sec["baseurl"]
                if not sec.has_key("exclude"):
                    excludes = ""
                else:
                    excludes = sec["exclude"]
                if not baseurl.startswith("file:/"):
                    printWarning(0, "%s: Only file:/ baseurls supported for now." % key)
                    continue
                val = baseurl[5:]
                if os.path.isdir(val):
                    yum.addRepo(val, excludes)
                if os.path.isdir(val+"/RedHat/RPMS"):
                    yum.addRepo(val+"/RedHat/RPMS", excludes)
                if os.path.isdir(val+"/Fedora/RPMS"):
                    yum.addRepo(val+"/Fedora/RPMS", excludes)
                if rpmconfig.compsfile == None and \
                   os.path.isfile(val+"/repodata/comps.xml"):
                    rpmconfig.compsfile = val+"/repodata/comps.xml"
    elif opt == "--quiet":
        rpmconfig.debug_level = 0
        rpmconfig.warning_level = 0
        rpmconfig.verbose_level = 0
        rpmconfig.printhash = 0
    elif opt == "--autoerase":
        yum.setAutoerase(1)
    elif opt == "--version":
        print "pyrpmyum", __version__
        sys.exit(0)
    elif opt == "-y":
        yum.setConfirm(0)
    elif opt == "--dbpath":
        rpmconfig.dbpath = val
    elif opt == "--force":
        rpmconfig.force = 1
    elif opt in ["-h", "--hash"]:
        rpmconfig.printhash = 1
    elif opt == "--oldpackage":
        rpmconfig.oldpackage = 1
    elif opt == "--justdb":
        rpmconfig.justdb = 1
        rpmconfig.noscripts = 1
        rpmconfig.notriggers = 1
    elif opt == "--test":
        rpmconfig.test = 1
        rpmconfig.noscripts = 1
        rpmconfig.notriggers = 1
        rpmconfig.timer = 1
    elif opt == "--ignoresize":
        rpmconfig.ignoresize = 1
    elif opt == "--ignorearch":
        rpmconfig.ignorearch = 1
    elif opt == "--noconflicts":
        rpmconfig.noconflicts = 1
    elif opt == "--nofileconflicts":
        rpmconfig.nofileconflicts = 1
    elif opt == "--nodeps":
        rpmconfig.nodeps = 1
    elif opt == "--nodigest":
        rpmconfig.nodigest = 1
    elif opt == "--nofileconflicts":
        rpmconfig.nofileconflicts = 1
    elif opt == "--nosignature":
        rpmconfig.nosignature = 1
    elif opt == "--noorder":
        rpmconfig.noorder = 1
    elif opt == "--noscripts":
        rpmconfig.noscripts = 1
    elif opt == "--notriggers":
        rpmconfig.notriggers = 1

if rpmconfig.verbose_level > 1:
    rpmconfig.warning_level = rpmconfig.verbose_level - 1
if rpmconfig.verbose_level > 2:
    rpmconfig.warning_level = rpmconfig.verbose_level - 2

if not args:
    printError("No command given")
    usage()
    sys.exit(1)

yum.setCommand(args[0])
yum.processArgs(args[1:])
yum.runDepRes()
yum.runCommand()

# vim:ts=4:sw=4:showmatch:expandtab
