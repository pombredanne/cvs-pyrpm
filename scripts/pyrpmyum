#!/usr/bin/python
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Library General Public License as published by
# the Free Software Foundation; version 2 only
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
# Copyright 2004, 2005 Red Hat, Inc.
#
# Author: Phil Knirsch
#

import sys, os, getopt

PYRPMDIR = ".."
if not PYRPMDIR in sys.path:
    sys.path.append(PYRPMDIR)
from pyrpm import *
from pyrpm import __version__

def usage():
    print """
INSTALLING, UPGRADING, AND REMOVING PACKAGES using REPOS:
    pyrpmyum install [install-options] PACKAGE_FILE ...
    pyrpmyum groupinstall [install-options] PACKAGE_FILE ...
    pyrpmyum upgrade [install-options] PACKAGE_FILE ...
    pyrpmyum groupupgrade [install-options] PACKAGE_FILE ...
    pyrpmyum update [install-options] PACKAGE_FILE ...
    pyrpmyum groupupdate [install-options] PACKAGE_FILE ...
    pyrpmyum remove [install-options] PACKAGE_FILE ...
    pyrpmyum groupremove [install-options] PACKAGE_FILE ...

general options:
    [-?, --help] [--version]
    [--quiet] [-v, --verbose] [-y]
    [-c CONFIGFILE] [--dbpath DIRECTORY] [-r, --root DIRECTORY]

install-options:
    [-h, --hash] [--force] [--oldpackage] [--justdb] [--test]
    [--ignoresize] [--ignorearch]
    [--nodeps] [--nodigest] [--nosignature]
    [--noorder] [--noscripts] [--notriggers]
    [--autoerase]

Warning: Some of the install-options are not evaluated yet
Warning: [group]remove doesn't work yet either, use pyrpminstall -e"""

def genObsoletePkg(pkg):
    dummy = RpmPackage("dummy")
    dummy["name"] = "obsoletes-%s" % pkg.getNEVRA()
    dummy["thisisaobsoletespackage"] = 1
    dummy["version"] = "0"
    dummy["release"] = "0"
    dummy["arch"] = "noarch"
    dummy["filenames"] = [ ]
    dummy["obsoletename"] = [pkg["name"]]
    dummy["obsoleteflags"] = [RPMSENSE_EQUAL]
    dummy["obsoleteversion"] = [pkg.getEVR()]
    dummy["provides"] = dummy.getProvides()
    dummy["requires"] = dummy.getRequires()
    dummy["obsoletes"] = dummy.getObsoletes()
    dummy["conflicts"] = dummy.getConflicts()
    dummy["triggers"] = dummy.getTriggers()
    return dummy

def runDepResolution(resolver):
    unresolved = resolver.getUnresolvedDependencies()
    iter = 1
    while len(unresolved) > 0:
        printInfo(1, "Dependency iteration " + str(iter) + "\n")
        iter += 1
        respkglist = [ ]
        for pkg in unresolved.keys():
            printInfo(1, "Resolving dependencies for "+pkg.getNEVRA()+"\n")
            found = 0
            for dep in unresolved[pkg]:
                printInfo(2, "\t" + depString(dep) + "\n")
                for upkg in repo.searchDependency(dep):
                    ret = resolver.append(upkg)
                    resolver.doObsoletes()
                    if ret > 0 or ret == RpmResolver.ALREADY_ADDED:
                        found = 1
                        respkglist.append(upkg)
                        break
            if found == 0:
                tmplist = []
                tmplist.extend(findPkgByName(pkg["name"], repo.appended))
                filterArchList(tmplist, rpmconfig.machine)
                while len(tmplist) > 0 and tmplist[0]["arch"] != pkg["arch"]:
                    tmplist.pop(0)
                if len(tmplist) == 0 or tmplist[0].getNEVRA() == pkg.getNEVRA():
                    if autoerase:
                        printWarning(1, "Autoerasing package %s due to missing update package." % pkg.getNEVRA())
                        ret = resolver.append(genObsoletePkg(pkg))
                        if ret > 0:
                            resolver.doObsoletes()
                            erase_list.append(pkg)
                    else:
                        printWarning(0, "Couldn't find update for package %s" \
                            % pkg.getNEVRA())
                        sys.exit(1)
                else:
                    resolver.append(tmplist[0])
                    resolver.doObsoletes()
                    respkglist.append(tmplist[0])
        filterArchList(respkglist)
        if len(respkglist) == 0:
            for (pkg, deplist) in unresolved:
                if autoerase:
                    printWarning(1, "Autoerasing package %s due to unresolved symbols." % pkg.getNEVRA())
                    ret = resolver.append(genObsoletePkg(pkg))
                    if ret > 0:
                        resolver.doObsoletes()
                        erase_list.append(pkg)
                else:
                    printInfo(1, "Unresolved dependencies for "+pkg.getNEVRA()+"\n")
                    for dep in deplist:
                        printInfo(1, "\t" + depString(dep)+"\n")
            if not autoerase:
                sys.exit(1)
        unresolved = resolver.getUnresolvedDependencies()

def readRpmPackage(filename):
    pkg = RpmPackage(filename)
    pkg.open()
    pkg.read(tags=rpmconfig.resolvertags)
    pkg.close()
    return pkg

def addDirToRepo(dirname, resolver, excludes):
    pkg_list = []
    for f in os.listdir(dirname):
        fn = "%s/%s" % (dirname, f)
        if not f.endswith(".rpm") or not os.path.isfile(fn):
            continue
        pkg_list.append(readRpmPackage(fn))
    ex_list = string.split(excludes)
    for ex in ex_list:
        excludes = findPkgByName(ex, pkg_list)
        for pkg in excludes:
            pkg_list.remove(pkg)
    for pkg in pkg_list:
        resolver.append(pkg)

#
# Main program
#

# Default: Don't autoerase packages that have unresolved symbols in install or
# update
autoerase = 0

# Default: Ask use for confirmation of complete operation
confirm = 1

try:
    opts, args = getopt.getopt(sys.argv[1:], "?vhc:r:y",
        ["help", "verbose",
         "hash", "version", "quiet", "dbpath=", "root=",
         "force", "ignoresize", "ignorearch", "justdb",
         "nodeps", "nodigest", "nosignature", "noorder", "noscripts",
         "notriggers", "oldpackage", "test", "autoerase"])
except getopt.error, e:
    print "Error parsing command list arguments: %s" % e
    usage()
    sys.exit(1)

for (opt, val) in opts:
    if   opt in ['-?', "--help"]:
        usage()
        sys.exit(0)
    elif opt in ["-v", "--verbose"]:
        rpmconfig.verbose_level += 1
    elif opt in ["-r", "--root"]:
        rpmconfig.buildroot = val
    elif opt == "-c":
        conf = YumConf("3", rpmconfig.machine, buildarchtranslate[rpmconfig.machine], val)
        repo = RpmResolver([], OP_INSTALL)
        for key in conf.vars.keys():
            if key == "main":
                pass
            else:
                sec = conf[key]
                if not sec.has_key("baseurl"):
                    printError("%s: No baseurl for this section in conf file." % key)
                    sys.exit(1)
                baseurl = sec["baseurl"]
                if not sec.has_key("exclude"):
                    excludes = ""
                else:
                    excludes = sec["exclude"]
                if not baseurl.startswith("file:/"):
                    printWarning(0, "%s: Only file:/ baseurls supported for now." % key)
                    continue
                val = baseurl[5:]
                if os.path.isdir(val):
                    addDirToRepo(val, repo, excludes)
                if os.path.isdir(val+"/RedHat/RPMS"):
                    addDirToRepo(val+"/RedHat/RPMS", repo, excludes)
                if os.path.isdir(val+"/Fedora/RPMS"):
                    addDirToRepo(val+"/Fedora/RPMS", repo, excludes)
                if rpmconfig.compsfile == None and \
                   os.path.isfile(val+"/repodata/comps.xml"):
                    rpmconfig.compsfile = val+"/repodata/comps.xml"
    elif opt == "--quiet":
        rpmconfig.debug_level = 0
        rpmconfig.warning_level = 0
        rpmconfig.verbose_level = 0
        rpmconfig.printhash = 0
    elif opt == "--autoerase":
        autoerase = 1
    elif opt == "--version":
        print "pyrpmyum", __version__
        sys.exit(0)
    elif opt == "-y":
        confirm = 0
    elif opt == "--dbpath":
        rpmconfig.dbpath = val
    elif opt == "--force":
        rpmconfig.force = 1
    elif opt in ["-h", "--hash"]:
        rpmconfig.printhash = 1
    elif opt == "--oldpackage":
        rpmconfig.oldpackage = 1
    elif opt == "--justdb":
        rpmconfig.justdb = 1
        rpmconfig.noscripts = 1
        rpmconfig.notriggers = 1
    elif opt == "--test":
        rpmconfig.test = 1
        rpmconfig.noscripts = 1
        rpmconfig.notriggers = 1
        rpmconfig.timer = 1
    elif opt == "--ignoresize":
        rpmconfig.ignoresize = 1
    elif opt == "--ignorearch":
        rpmconfig.ignorearch = 1
    elif opt == "--nodeps":
        rpmconfig.nodeps = 1
    elif opt == "--nodigest":
        rpmconfig.nodigest = 1
    elif opt == "--nosignature":
        rpmconfig.nosignature = 1
    elif opt == "--noorder":
        rpmconfig.noorder = 1
    elif opt == "--noscripts":
        rpmconfig.noscripts = 1
    elif opt == "--notriggers":
        rpmconfig.notriggers = 1

if rpmconfig.verbose_level > 1:
    rpmconfig.warning_level = rpmconfig.verbose_level - 1
if rpmconfig.verbose_level > 2:
    rpmconfig.warning_level = rpmconfig.verbose_level - 2

if not args:
    printError("No command given")
    usage()
    sys.exit(1)

command = args[0]
args = args[1:]

# Read in db and store packages in installed
if rpmconfig.buildroot:
    pydb = RpmPyDB(rpmconfig.buildroot + rpmconfig.dbpath)
else:
    pydb = RpmPyDB(rpmconfig.dbpath)
installed = pydb.getPkgList().values()
del pydb

if command.startswith("group"):
    if rpmconfig.compsfile == None:
        printError("You need to specify a comps.xml file for group operations")
        usage()
        sys.exit(1)
    comps = RpmCompsXMLIO(rpmconfig.compsfile)
    comps.read()
    pkgs = []
    for grp in args:
        pkgs.extend(comps.getPackageNames(grp))
    args = pkgs
    del comps
else:
    if len(args) == 0:
        for pkg in installed:
            args.append(pkg["name"])

# Look for packages we need/want to install. Arguments can either be direct
# filenames or package nevra's with * wildcards
pkgs = []
for f in args:
    if os.path.isfile(f) and f.endswith(".rpm"):
        pkgs.append(readRpmPackage(f))
    elif os.path.isdir(f):
        for g in os.listdir(f):
            fn = "%s/%s" % (f, g)
            if not g.endswith(".rpm") or not os.path.isfile(fn):
                continue
            pkgs.append(readRpmPackage(fn))
    else:
        pkgs.extend(findPkgByName(f, repo.appended))
        filterArchList(pkgs, rpmconfig.machine)
        if len(pkgs) == 0:
            printError("Couldn't find package %s, skipping" % f)

# Add packages to be updated to our operation resolver
opresolver = RpmResolver(installed, OP_UPDATE)
for pkg in pkgs:
    if command in ("update", "upgrade", "groupupdate", "groupupgrade"):
        name = pkg["name"]
        for ipkg in installed:
            if ipkg["name"] == name:
                ret = opresolver.append(pkg)
                break
    else:
        opresolver.append(pkg)
del pkgs

# Look for obsoletes and add them to our update packages
for pkg in repo.appended:
    for u in pkg["obsoletes"]:
        s = opresolver.searchDependency(u)
        if len(s) > 0:
            ret = opresolver.append(pkg)
            if ret > 0:
                opresolver.doObsoletes()

# Special erase list for unresolvable package dependancies
erase_list = []

runDepResolution(opresolver)
appended = opresolver.appended
del repo
del opresolver


if len(erase_list) > 0:
    printInfo(0, "Warning: Following packages will be removed:\n")
    for p in erase_list:
        printInfo(0, "\t%s\n" % p.getNEVRA())

if confirm:
    choice = raw_input("Is this ok [y/N]: ")
    if len(choice) == 0:
        sys.exit(0)
    else:
        if choice[0] != "y" and choice[0] != "Y":
            sys.exit(0)

control = RpmController()
control.handlePkgs(appended, OP_UPDATE, rpmconfig.dbpath, rpmconfig.buildroot)

# vim:ts=4:sw=4:showmatch:expandtab
