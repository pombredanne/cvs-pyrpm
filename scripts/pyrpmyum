#!/usr/bin/python
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Library General Public License as published by
# the Free Software Foundation; version 2 only
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
# Copyright 2004, 2005 Red Hat, Inc.
#
# Author: Phil Knirsch
#

import sys, os, getopt

PYRPMDIR = ".."
if not PYRPMDIR in sys.path:
    sys.path.append(PYRPMDIR)
from pyrpm import *
from pyrpm import __version__

def usage():
    print "INSTALLING, UPGRADING, AND REMOVING PACKAGES using REPOS:"
    print "    pyrpmyum install [install-options] PACKAGE_FILE ..."
    print "    pyrpmyum groupinstall [install-options] PACKAGE_FILE ..."
    print "    pyrpmyum upgrade [install-options] PACKAGE_FILE ..."
    print "    pyrpmyum groupupgrade [install-options] PACKAGE_FILE ..."
    print "    pyrpmyum update [install-options] PACKAGE_FILE ..."
    print "    pyrpmyum groupupdate [install-options] PACKAGE_FILE ..."
    print "    pyrpmyum remove [install-options] PACKAGE_FILE ..."
    print "    pyrpmyum groupremove [install-options] PACKAGE_FILE ..."
    print
    print "general options:"
    print "    [-?, --help] [--version]"
    print "    [--quiet] [-v, --verbose] [-w, warning] [-d, --debug]"
    print "    [-c CONFIGFILE] [--dbpath DIRECTORY] [-r, --root DIRECTORY]"
    print "    [-g, --group COMPSFILE] [--repo DIRECTORY]"
    print
    print "install-options:"
    print "    [-h, --hash] [--force] [--oldpackage] [--justdb] [--test]"
    print "    [--ignoresize] [--ignorearch]"
    print "    [--nodeps] [--nodigest] [--nosignature]"
    print "    [--noorder] [--noscripts] [--notriggers]"
    print
    print "Warning: Some of the install-options are not evaluated yet"
    print "Warning: -c isn't working yet properly, use --repo for now"
    print "Warning: [group]remove doesn't work yet either, use pyrpminstall -e"

def runDepResolution(resolver, unresolved):
    iter = 1
    while len(unresolved) > 0:
        printInfo(1, "Dependency iteration " + str(iter) + "\n")
        iter += 1
        respkglist = []
        for pkg, deplist in unresolved:
            printInfo(2, "Resolving dependencies for "+pkg.getNEVRA()+"\n")
            found = 0
            for dep in deplist:
                printInfo(2, "\t" + depString(dep) + "\n")
                for repo in repos:
                    for upkg in repo.searchDependency(dep):
                        ret = resolver.append(upkg)
                        printInfo(2, "\t" + str(ret) + "\n")
                        if ret > 0 or ret == RpmResolver.ALREADY_ADDED:
                            found = 1
                            respkglist.append(upkg)
            if found == 0:
                tmplist = []
                for repo in repos:
                    tmplist.extend(findPkgByName(pkg["name"], repo.appended))
                filterArchList(tmplist, rpmconfig.machine)
                while len(tmplist) > 0 and tmplist[0]["arch"] != pkg["arch"]:
                    tmplist.pop(0)
                if len(tmplist) == 0 or tmplist[0].getNEVRA() == pkg.getNEVRA():
                    printError("Couldn't find update for package %s" % pkg.getNEVRA())
                    sys.exit(1)
                resolver.append(tmplist[0])
                respkglist.append(tmplist[0])
        filterArchList(respkglist)
        if len(respkglist) == 0:
            for pkg, deplist in unresolved:
                printInfo(1, "Unresolved dependencies for "+pkg.getNEVRA()+"\n")
                for dep in deplist:
                    printInfo(1, "\t" + depString(dep)+"\n")
            sys.exit(1)
        unresolved = resolver.getUnresolvedDependencies()

def addDirToRepo(dirname, resolver):
    for f in os.listdir(dirname):
        fn = "%s/%s" % (dirname, f)
        if not f.endswith(".rpm") or not os.path.isfile(fn):
            continue
        pkg = RpmPackage(fn)
        pkg.open()
        pkg.read(tags=rpmconfig.resolvertags)
        pkg.close()
        ret = resolver.append(pkg)

#
# Main program
#
try:
    opts, args = getopt.getopt(sys.argv[1:], "?vwdhc:r:g:",
        ["help", "verbose",
         "warning", "debug", "hash", "version", "quiet", "dbpath=", "root=",
         "group=", "repo=", "force", "ignoresize", "ignorearch", "justdb",
         "nodeps", "nodigest", "nosignature", "noorder", "noscripts",
         "notriggers", "oldpackage", "test"])
except getopt.error, e:
    print "Error parsing command list arguments: %s" % e
    usage()
    sys.exit(1)

repos = []

for (opt, val) in opts:
    if   opt in ['-?', "--help"]:
        usage()
        sys.exit(0)
    elif opt in ["-v", "--verbose"]:
        rpmconfig.verbose_level += 1
    elif opt in ["-w", "--warning"]:
        rpmconfig.warning_level += 1
    elif opt in ["-d", "--debug"]:
        rpmconfig.debug_level += 1
    elif opt in ["-r", "--root"]:
        rpmconfig.buildroot = val
    elif opt in ["-g", "--group"]:
        rpmconfig.compsfile = val
    elif opt == "--repo":
        resolver = RpmResolver([], OP_INSTALL)
        if os.path.isdir(val):
            addDirToRepo(val, resolver)
        if os.path.isdir(val+"/RedHat/RPMS"):
            addDirToRepo(val+"/RedHat/RPMS", resolver)
        if os.path.isdir(val+"/Fedora/RPMS"):
            addDirToRepo(val+"/Fedora/RPMS", resolver)
        if rpmconfig.compsfile == None and os.path.isfile(val+"/repodata/comps.xml"):
            rpmconfig.compsfile = val+"/repodata/comps.xml"
        repos.append(resolver)
        del resolver
    elif opt == "--quiet":
        rpmconfig.debug_level = 0
        rpmconfig.warning_level = 0
        rpmconfig.verbose_level = 0
        rpmconfig.printhash = 0
    elif opt == "--version":
        print "pyrpminstall", __version__
        sys.exit(0)
    elif opt == "--dbpath":
        rpmconfig.dbpath = val
    elif opt == "--force":
        rpmconfig.force = 1
    elif opt in ["-h", "--hash"]:
        rpmconfig.printhash = 1
    elif opt == "--oldpackage":
        rpmconfig.oldpackage = 1
    elif opt == "--justdb":
        rpmconfig.justdb = 1
        rpmconfig.noscripts = 1
        rpmconfig.notriggers = 1
    elif opt == "--test":
        rpmconfig.test = 1
        rpmconfig.noscripts = 1
        rpmconfig.notriggers = 1
    elif opt == "--ignoresize":
        rpmconfig.ignoresize = 1
    elif opt == "--ignorearch":
        rpmconfig.ignorearch = 1
    elif opt == "--nodeps":
        rpmconfig.nodeps = 1
    elif opt == "--nodigest":
        rpmconfig.nodigest = 1
    elif opt == "--nosignature":
        rpmconfig.nosignature = 1
    elif opt == "--noorder":
        rpmconfig.noorder = 1
    elif opt == "--noscripts":
        rpmconfig.noscripts = 1
    elif opt == "--notriggers":
        rpmconfig.notriggers = 1

if not args:
    printError("No command given")
    usage()
    sys.exit(1)

command = args[0]
args = args[1:]

if command.startswith("group"):
    if rpmconfig.compsfile == None:
        printError("You need to specify a comps.xml file for group operations")
        usage()
        sys.exit(1)
    comps = RpmCompsXMLIO(rpmconfig.compsfile)
    comps.read()
    pkgs = []
    for grp in args:
        pkgs.extend(comps.getPackageNames(grp))
    args = pkgs

if   command == "install" or command == "groupinstall":
    rpmconfig.operation = OP_INSTALL
elif command == "update" or command == "upgrade" or \
     command == "groupupdate" or command == "groupupgrade":
    rpmconfig.operation = OP_FRESHEN

if rpmconfig.buildroot:
    pydb = RpmPyDB(rpmconfig.buildroot + rpmconfig.dbpath)
else:
    pydb = RpmPyDB(rpmconfig.dbpath)
installed = pydb.getPkgList().values()
del pydb

opresolver = RpmResolver(installed, OP_UPDATE)
pkgs = []
for f in args:
    if os.path.isfile(f) and f.endswith(".rpm"):
        pkg = RpmPackage(f)
        pkg.open()
        pkg.read(tags=rpmconfig.resolvertags)
        pkg.close()
        pkgs.append(pkgs)
    else:
        for repo in repos:
            pkgs.extend(findPkgByName(f, repo.appended))
        filterArchList(pkgs, rpmconfig.machine)
        if len(pkgs) == 0:
            printError("Couldn't find package %s, skipping" % f)

for pkg in pkgs:
    if rpmconfig.operation == OP_UPDATE or rpmconfig.operation == OP_FRESHEN:
        name = pkg["name"]
        for ipkg in installed:
            if ipkg["name"] == name:
                ret = opresolver.append(pkg)
                break
    else:
        opresolver.append(pkg)

unresolved = opresolver.getUnresolvedDependencies()
runDepResolution(opresolver, unresolved)
appended = opresolver.appended
del opresolver
del repos

control = RpmController()
control.handlePkgs(appended, OP_UPDATE, rpmconfig.dbpath,
    rpmconfig.buildroot)

# vim:ts=4:sw=4:showmatch:expandtab
