#!/usr/bin/python
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Library General Public License as published by
# the Free Software Foundation; version 2 only
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
# Copyright 2004, 2005 Red Hat, Inc.
#
# Author: Phil Knirsch
#

import sys, os, getopt

PYRPMDIR = ".."
if not PYRPMDIR in sys.path:
    sys.path.append(PYRPMDIR)
from pyrpm import *

def usage():
    print "INSTALLING, UPGRADING, AND REMOVING PACKAGES using REPOS:"
    print "    pyrpminstall {-i|--install} [install-options] PACKAGE_FILE ..."
    print "    pyrpminstall {-U|--upgrade} [install-options] PACKAGE_FILE ..."
    print "    pyrpminstall {-F|--freshen} [install-options] PACKAGE_FILE ..."
    print "    pyrpminstall {-e|--erase} [install-options] PACKAGE_FILE ..."
    print
    print "general options:"
    print "    [-?, --help] [--version]"
    print "    [--quiet] [-v, --verbose] [-w, warning] [-d, --debug]"
    print "    [--dbpath DIRECTORY] [-r, --root DIRECTORY]"
    print "    [--repo DIRECTORY]"
    print
    print "install-options:"
    print "    [-h, --hash] [--force] [--oldpackage] [--justdb] [--test]"
    print "    [--ignoresize] [--ignorearch]"
    print "    [--nodeps] [--nodigest] [--nosignature]"
    print "    [--noorder] [--noscripts] [--notriggers]"

def runDepResolution(resolver, unresolved, skiplist):
    iter = 1
    while len(unresolved) > 0:
        print "Dependency iteration "+str(iter)
        iter += 1
        respkglist = []
        for pkg, deplist in unresolved:
            printInfo(1, "Resolving dependencies for "+pkg.getNEVRA()+"\n")
            for dep in deplist:
                print "\t"+depString(dep)
                for repo in repos:
                    res = repo.searchDependency(dep)
                    for pkg in res:
                        respkglist.append(pkg)
        normalizeList(respkglist)
        filterArchList(respkglist)
        if len(respkglist) == 0:
            for pkg, deplist in unresolved:
                printInfo(1, "Unresolved dependencies for "+pkg.getNEVRA()+"\n")
                for dep in deplist:
                    printInfo(1, "\t" + depString(dep)+"\n")
            sys.exit(1)
        for pkg in respkglist:
            if not pkg in skiplist:
                resolver.append(pkg)
        unresolved = resolver.getUnresolvedDependencies()


#
# Main program
#
try:
    opts, args = getopt.getopt(sys.argv[1:], "iUFe?vwdhr:",
        ["install", "upgrade", "freshen", "erase", "help", "verbose",
         "warning", "debug", "hash", "version", "quiet", "dbpath=", "root=",
         "repo=", "force", "ignoresize", "ignorearch", "justdb", "nodeps",
         "nodigest", "nosignature", "noorder", "noscripts", "notriggers",
         "oldpackage", "test"])
except getopt.error, e:
    print "Error parsing command list arguments: %s" % e
    usage()
    sys.exit(1)

rpmconfig.buildroot = "/"
rpmconfig.operation = None
rpmconfig.verbose_level = 0
rpmconfig.warning_level = 0
rpmconfig.debug_level = 0
repos = []

for (opt, val) in opts:
    if opt in ["-i", "--install"]:
        if rpmconfig.operation != None:
            print "Only one operation at a time is allow."
            usage()
            sys.exit(1)
        rpmconfig.operation = RpmResolver.OP_INSTALL
    elif opt in ["-U", "--upgrade"]:
        if rpmconfig.operation != None:
            print "Only one operation at a time is allow."
            usage()
            sys.exit(1)
        rpmconfig.operation = RpmResolver.OP_UPDATE
    elif opt in ["-F", "--freshen"]:
        if rpmconfig.operation != None:
            print "Only one operation at a time is allow."
            usage()
            sys.exit(1)
        rpmconfig.operation = RpmResolver.OP_FRESHEN
    elif opt in ["-e", "--erase"]:
        if rpmconfig.operation != None:
            print "Only one operation at a time is allow."
            usage()
            sys.exit(1)
        rpmconfig.operation = RpmResolver.OP_ERASE
    elif opt in ['-?', "--help"]:
        usage()
        sys.exit(0)
    elif opt in ["-v", "--verbose"]:
        rpmconfig.verbose_level += 1
    elif opt in ["-w", "--warning"]:
        rpmconfig.warning_level += 1
    elif opt in ["-d", "--debug"]:
        rpmconfig.debug_level += 1
    elif opt in ["-r", "--root"]:
        rpmconfig.buildroot = val
    elif opt == "--repo":
        resolver = RpmResolver([], RpmResolver.OP_INSTALL)
        filenames = os.listdir(val)
        for f in filenames:
            if not f.endswith(".rpm") or not os.path.isfile(val+"/"+f):
                continue
            pkg = RpmPackage(val+"/"+f)
            pkg.open()
            pkg.read(tags=rpmconfig.resolvertags)
            pkg.close()
            ret = resolver.append(pkg)
        repos.append(resolver)
        del resolver
    elif opt == "--quiet":
        rpmconfig.debug_level = 0
        rpmconfig.warning_level = 0
        rpmconfig.verbose_level = 0
        rpmconfig.hash = 0
    elif opt == "--version":
        print "pyrpminstall 0.1.0"
        sys.exit(0)
    elif opt == "--dbpath":
        rpmconfig.dbpath = val
    elif opt == "--force":
        rpmconfig.force = 1
    elif opt in ["-h", "--hash"]:
        rpmconfig.hash = 1
    elif opt == "--oldpackage":
        rpmconfig.oldpackage = 1
    elif opt == "--justdb":
        rpmconfig.justdb = 1
        rpmconfig.noscripts = 1
        rpmconfig.notriggers = 1
    elif opt == "--test":
        rpmconfig.test = 1
        rpmconfig.noscripts = 1
        rpmconfig.notriggers = 1
    elif opt == "--ignoresize":
        rpmconfig.ignoresize = 1
    elif opt == "--ignorearch":
        rpmconfig.ignorearch = 1
    elif opt == "--nodeps":
        rpmconfig.nodeps = 1
    elif opt == "--nodigest":
        rpmconfig.nodigest = 1
    elif opt == "--nosignature":
        rpmconfig.nosignature = 1
    elif opt == "--noorder":
        rpmconfig.noorder = 1
    elif opt == "--noscripts":
        rpmconfig.noscripts = 1
    elif opt == "--notriggers":
        rpmconfig.notriggers = 1

if not args:
    print "Error no packages to install"
    usage()
    sys.exit(1)

installed = []
if rpmconfig.buildroot != None:
    pydb = RpmPyDB(rpmconfig.buildroot+rpmconfig.dbpath)
else:
    pydb = RpmPyDB(rpmconfig.dbpath)
installed = pydb.getPkgList()
if installed == None:
    installed = []
else:
    installed = installed.values()
del pydb

opresolver = RpmResolver(installed, rpmconfig.operation)
for f in args:
    if os.path.isfile(f) and f.endswith(".rpm"):
        pkg = RpmPackage(f)
        pkg.open()
        pkg.read(tags=rpmconfig.resolvertags)
        pkg.close()
    else:
        pkgs = []
        for repo in repos:
            pkgs.extend(findPkgByName(f, repo.appended))
        filterArchList(pkgs, rpmconfig.machine)
        if len(pkgs) == 0:
            printError("Couldn't find package %s" % f)
            sys.exit(1)
        pkg = pkgs[0]
    if rpmconfig.operation == RpmResolver.OP_UPDATE or rpmconfig.operation == RpmResolver.OP_FRESHEN:
        name = pkg["name"]
        for ipkg in installed:
            if ipkg["name"] == name:
                ret = opresolver.append(pkg)
                break
    else:
        ret = opresolver.append(pkg)

unresolved = opresolver.getUnresolvedDependencies()
runDepResolution(opresolver, unresolved, [])
appended = opresolver.appended
del opresolver
del repos

control = RpmController()
control.handlePkgs(appended, RpmResolver.OP_UPDATE, rpmconfig.dbpath,
    rpmconfig.buildroot)

# vim:ts=4:sw=4:showmatch:expandtab
