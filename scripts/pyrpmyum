#!/usr/bin/python
#
# ./pyrpmyum -r /home/n -c /etc/nix -y --test --fileconflicts install /var/www/html/mirror/fedora/development/i386/Fedora/RPMS
#
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Library General Public License as published by
# the Free Software Foundation; version 2 only
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
# Copyright 2004, 2005 Red Hat, Inc.
#
# Author: Phil Knirsch
#

import sys, os, getopt, errno

PYRPMDIR = ".."
if not PYRPMDIR in sys.path:
    sys.path.append(PYRPMDIR)
from pyrpm import __version__
from pyrpm import *

def usage():
    print """
INSTALLING, UPGRADING, AND REMOVING PACKAGES using REPOS:
    pyrpmyum install [options] PACKAGE_FILE ...
    pyrpmyum groupinstall [options] PACKAGE_FILE ...
    pyrpmyum upgrade [options] PACKAGE_FILE ...
    pyrpmyum groupupgrade [options] PACKAGE_FILE ...
    pyrpmyum update [options] PACKAGE_FILE ...
    pyrpmyum groupupdate [options] PACKAGE_FILE ...
    pyrpmyum remove [options] PACKAGE_FILE ...
    pyrpmyum groupremove [options] PACKAGE_FILE ...

options:
    [-?, --help] [--version]
    [--quiet] [-v, --verbose] [-y]
    [-c CONFIGFILE] [--dbpath DIRECTORY] [-r, --root DIRECTORY]
    [-h, --hash] [--force] [--oldpackage] [--justdb] [--test]
    [--ignoresize] [--ignorearch] [--exactarch]
    [--noconflicts] [--fileconflicts]
    [--nodeps] [--nodigest] [--nosignature]
    [--noorder] [--noscripts] [--notriggers]
    [--autoerase] [--installpkgs="pkg1 pkg2 pkg2 ..."]

Warning: Some of the options are not evaluated yet"""

def lockPyrpm():
    if os.getuid() != 0 or rpmconfig.test:
        return ""
    if rpmconfig.buildroot != None:
        lockfile = rpmconfig.buildroot + "/var/run/pyrpmyum.pid"
    else:
        lockfile = "/var/run/pyrpmyum.pid"
    try:
        makeDirs(lockfile)
    except OSError:
        pass
    if tryUnlock(lockfile) == 1: # FIXME: IOError
        return None
    if doLock(lockfile) == 0: # FIXME: OSError
        return None
    return lockfile

#
# Main program
#
def main():
    # Our yum worker object
    yum = RpmYum(rpmconfig)

    # Disabled fileconflicts per default in yum
    rpmconfig.nofileconflicts = 1

    # Default is to be a little verbose.
    rpmconfig.verbose = 1

    # Argument parsing
    args = parseYumOptions(sys.argv[1:], yum)

    if not args:
        usage()
        return 1

    lockfile = lockPyrpm()
    if lockfile == None:
        printError("couldn't lock pyrpmyum")
        return 0
    if not yum.setCommand(args[0]):
        return 0
    if not yum.prepareTransaction():
        return 0
    if not yum.runArgs(args[1:]):
        return 0
    if not yum.runDepRes():
        return 0
    if not yum.runCommand():
        return 0
    if lockfile:
        try:
            os.unlink(lockfile)
        except OSError:
            pass
    return 1

if __name__ == '__main__':
    if not run_main(main):
        sys.exit(1)

# vim:ts=4:sw=4:showmatch:expandtab
