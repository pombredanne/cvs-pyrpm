#!/bin/bash

test -x ./pyrpmyum || { echo "script needs to be run from pyrpm/scripts with \"../test/`basename $0`\"" ; exit 1; }

HOSTNAME=`hostname`
IP=`host $HOSTNAME`
IP=${IP/* /}

NET=${IP:0:8}

if [ "$NET" == "10.32.5." ]; then
    echo "assuming porky.stuttgart directory layout"
    LOCATION="develstr"
    RHELRELEASED=/mnt/raid/redhat/released
    RHELRELENG=/mnt/raid/redhat/rel-eng
    RHELUPDATES=/mnt/stgt/redhat/nightly
    FEDORARELEASED=/mnt/raid/fedora
    FEDORARELEASED=/mnt/raid/fedora
    FEDORAUPDATES=/mnt/raid/fedora/updates
    FEDORAEXTRAS=/mnt/raid/fedora-extras
    FEDORANIGHTLY="/mnt/raid/fedora/development"
else
    echo "assuming porkchop directory layout"
    LOCATION="develrdu"
    RHELRELEASED=/mnt/redhat/released
    RHELRELENG=/mnt/redhat/rel-eng
    RHELUPDATES=/mnt/redhat/nightly
    FEDORARELEASED=/mnt/redhat/released
    FEDORAUPDATES=/mnt/redhat/fedora/updates-stage
    FEDORAEXTRAS=""
    FEDORANIGHTLY=/mnt/redhat/nightly/rawhide-latest
fi

umask 022

HARDWARE=`uname -i`
if [ "$HARDWARE" == "i386" ]; then
    INSTALLARCHS="i386"
elif [ "$HARDWARE" == "ia64" ]; then
    INSTALLARCHS="ia64 i386"
elif [ "$HARDWARE" == "x86_64" ]; then
    INSTALLARCHS="x86_64 i386"
elif [ "$HARDWARE" == "ppc64" ]; then
    INSTALLARCHS="ppc"
elif [ "$HARDWARE" == "s390x" ]; then
    INSTALLARCHS="s390x s390"
elif [ "$HARDWARE" == "s390" ]; then
    INSTALLARCHS="s390"
fi

usage() {
    echo "Usage: `basename $0` [-h] [-v] [-d] [-w] [-t] [-i <n>]" >&2
    echo "  -h  Display help"
    echo "  -d  run daily checks"
    echo "  -f  run only Fedora checks"
    echo "  -i <n>  run randomizer with n iterations"
    echo "  -p <path> path to a specific RHEL tree for RHEL checks"
    echo "  -r  run only RHEL checks"
    echo "  -t  test mode, use it to see what commands will be run"
    echo "  -v  verbose"
    echo "  -w  run weekly checks (takes a very long time)"
    [[ $# -eq 1 ]] && exit $1 || exit $EXIT_FAILURE
}

dokill() {
    killall cups-config-daemon 2> /dev/null
    killall minilogd 2> /dev/null
}

preparechroot() {
    nodev=
    if test x$1 = x--nodev ; then
        nodev=--nodev
        shift
    fi
    fuser -k $1/ 2> /dev/null
    dokill
    umount $1/dev 2> /dev/null
    umount $1/proc 2> /dev/null
    mkdir -p $1/{dev,etc/sysconfig,tmp,proc}
    mkdir -p $1/var/{tmp,run,lib/rpm}
    chmod 1777 $1/tmp
    touch $1/etc/fstab
    echo "NETWORKING=yes" > $1/etc/sysconfig/network
    if test x$nodev = x ; then
        mount --bind /dev $1/dev
    else
        mknod -m 0666 $1/dev/null c 1 3
        mknod -m 0666 $1/dev/zero c 1 5
        mknod -m 0644 $1/dev/random c 1 8
        mknod -m 0644 $1/dev/urandom c 1 9
        mknod -m 0660 $1/dev/ttyS0 c 4 64
        mknod -m 0660 $1/dev/ttyS1 c 4 65
        mknod -m 0666 $1/dev/ptmx c 5 2
        mknod -m 0660 $1/dev/md0 b 9 0
        mknod -m 0660 $1/dev/loop0 b 7 1
    fi
    mount -t proc proc $1/proc
}

cleanchroot() {
    test -d $1/dev  || return
    test -d $1/proc || return
    dokill
    umount $1/dev  2> /dev/null
    umount $1/proc 2> /dev/null
    umount $1/mnt/raid 2> /dev/null
    test -d $1/proc/1 -o -e $1/dev/pts/1 \
        && { echo "umount did not work for $1"; exit 1; }
    if mount | gawk '{print $3}' | grep -q "^$1$" ; then
        echo "umount did not work for $1"; exit 1;
    fi
    rm -fr $1
}

doinstall() {
    nodev=
    arch=
    if test x$1 = x--nodev ; then
        nodev=--nodev
        shift
    fi
    if test x$1 = x--arch ; then
        arch="--arch $2"
        shift
        shift
    fi
    test -d "$1" || { echo "No dir $1 exists."; return; }
    if [ "$TESTONLY" == "y" ]; then
        return
    fi
    cleanchroot $2
    preparechroot $nodev $2
    sync
    if test x$3 = xrpm ; then
        { time rpm -U --nodigest --nosignature --root=$2 $1/*.rpm; } 2>&1 \
            | tee $2.LOG
    else
        { time $PYRPMYUM $arch -r $2 -c $2/etc/nosuchfile.conf install $1; } 2>&1 \
            | tee $2.LOG
    fi
    sync
    dokill
}

vecho() {
    if [ "$VERBOSE" == "y" ]; then
        echo "$*"
    fi
}

run() {
    echo "$1" >> $2
    vecho "$1"
    if [ "$TESTONLY" == "y" ]; then
        return
    fi
    { time $1; } 2>&1 | tee -a $2
    [ -f $2 ] && cat $2 >> $LOG
}

genyumconf() {
test -n "$3" && {
    mkdir -p $2/mnt/raid
    mount porky.stuttgart.redhat.com:/mnt/raid $2/mnt/raid
    cp /etc/resolv.conf $2/etc/
}
    rm -f $2/etc/yum.repos.d/*
    rm -f $2/var/lib/rpm/__*
    cat > $2/etc/yum.conf <<EOF
[main]
cachedir=/var/cache/yum
debuglevel=0
errorlevel=0
logfile=/var/log/yum.log
gpgcheck=0
assumeyes=1
tolerant=1
exactarch=0
obsoletes=1
distroverpkg=fedora-release
retries=10
pkgpolicy=newest
#reposdir=/etc/does-not-exist
EOF
test -n "$3" && cat >> $2/etc/yum.conf <<EOF
[base]
name=Fedora Linux Core $1 - $ARCH
baseurl=file://$FEDORARELEASED/$1/$ARCH/os/

EOF
cat >> $2/etc/yum.conf <<EOF
[updates]
name=Fedora Linux Core $1 - $ARCH - Updates
baseurl=file://$FEDORARELEASED/updates/$1/$ARCH/
EOF
}

function rawhidedepency() {
# dependency install checks with --test
# can run on any arch because no pre/post commands are executed
    if [ -n "$FEDORANIGHTLY" -a -d "$FEDORANIGHTLY" ]; then
        cd $FEDORANIGHTLY
        archdirs=`echo *`
        cd - >/dev/null
        for i in $archdirs; do
            if [ "$i" == "SRPMS" -o ! -d "$FEDORANIGHTLY/$i" -o "${i/logs/}" != "$i" ]; then
                continue
            fi
            IN=$DATA/$FUNCNAME-$i
            echo "Running $FUNCNAME on $FEDORANIGHTLY/$i"
            if [ "$i" == "i386" ]; then
                instarch=i686
            else
                instarch=$i
            fi
            run "$PYRPMYUM --test --arch $instarch -c /etc/nosuchfile.conf -r $IN install $FEDORANIGHTLY/$i/Fedora/RPMS/" "$IN.log"
        done
    fi
}

function rawhideextrasdepency() {
# dependency FCdevel+FE install checks with --test
# can run on any arch because no pre/post commands are executed
    if [ -n "$FEDORANIGHTLY" -a -d "$FEDORANIGHTLY" -a -n "$FEDORAEXTRAS" -a -d "$FEDORAEXTRAS" ]; then
        cd $FEDORANIGHTLY
        archdirs=`echo *`
        cd - >/dev/null
        for i in $archdirs; do
            if [ "$i" == "SRPMS" -o ! -d "$FEDORANIGHTLY/$i" -o "${i/logs/}" != "$i" ]; then
                continue
            fi
            if [ ! -d "$FEDORAEXTRAS/development/$i" ]; then
                echo "no devel-Extras repository for $i found, skipping"
            fi
            IN=$DATA/$FUNCNAME-$i
            echo "Running $FUNCNAME on $FEDORANIGHTLY/$i"
            if [ "$i" == "i386" ]; then
                instarch=i686
            else
                instarch=$i
            fi
            run "$PYRPMYUM --test --arch $instarch -c /etc/nosuchfile.conf -r $IN install $FEDORANIGHTLY/$i/Fedora/RPMS/ $FEDORAEXTRAS/development/$i" "$IN.log"
        done
    fi
}

function fc4todevelupdate() {
# install FC4 and then update to development
    FC4=
    if [ -d "$FEDORARELEASED/4" ]; then
        FC4=$FEDORARELEASED/4
    elif [ -d "$FEDORARELEASED/FC-4/GOLD" ]; then
        FC4=$FEDORARELEASED/FC-4/GOLD
    fi
    if [ -z "$FC4" ]; then
        echo "no FC4 directory found, skipping $FUNCNAME check"
        return
    fi
    if [ -n "$FEDORANIGHTLY" -a -d "$FEDORANIGHTLY" ]; then
        for i in $INSTALLARCHS; do
            if [ ! -d "$FEDORANIGHTLY/$i" ]; then
                continue
            fi
            if [ ! -d "$FC4/$i/os" ]; then
                echo "no FC4 repository for $i found, skipping"
                continue
            fi
            IN=$DATA/$FUNCNAME-$i
            echo "Running $FUNCNAME on $FC4/$i/os and $FEDORANIGHTLY/$i"
            doinstall --nodev $FC4/$i/os/Fedora/RPMS $IN
            run "$PYRPMYUM -v -c /etc/nosuchfile.conf -r $IN update $FEDORANIGHTLY/$i/Fedora/RPMS/" "$IN.LOG"
            cleanchroot $IN
        done
    fi
}

function fc4extrastodevelupdate() {
# install FC4 + FE4 and then update to development
    FC4=
    if [ -d "$FEDORARELEASED/4" ]; then
        FC4=$FEDORARELEASED/4
    elif [ -d "$FEDORARELEASED/FC-4/GOLD" ]; then
        FC4=$FEDORARELEASED/FC-4/GOLD
    fi
    if [ -z "$FC4" ]; then
        vecho "no FC4 directory found, skipping $FUNCNAME check"
        return
    fi
    if [ -z "$FEDORAEXTRAS" -o ! -d "$FEDORAEXTRAS/4" ]; then
        vecho "no FC4 Extras directory found, skipping $FUNCNAME check"
        return
    fi
    if [ -z "$FEDORANIGHTLY" -o ! -d "$FEDORANIGHTLY" ]; then
        vecho "no Rawhide directory found, skipping $FUNCNAME check"
        return
    fi
    for i in $INSTALLARCHS; do
        if [ ! -d "$FC4/$i/os" ]; then
            vecho "no FC4 repository for $i found, skipping"
            continue
        fi
        if [ ! -d "$FEDORANIGHTLY/$i" ]; then
            vecho "no Rawhide repository for $i found, skipping"
            continue
        fi
        if [ ! -d "$FEDORAEXTRAS/4/$i" ]; then
            vecho "no FC4 Extras repository for $i found, skipping"
            continue
        fi
        if [ ! -d "$FEDORAEXTRAS/development/$i" ]; then
            vecho "no Rawhide Extras for $i found, skipping"
            continue
        fi
        IN=$DATA/$FUNCNAME-$i
        vecho "Running $FUNCNAME on $FC4/$i/os, $FEDORAEXTRAS/4/$i and $FEDORANIGHTLY/$i"
        vecho "Installing $FC4/$i"
        doinstall --nodev $FC4/$i/os/Fedora/RPMS $IN
        vecho "Installing $FEDORAEXTRAS/4/$i"
        run "$PYRPMYUM -v -c /etc/nosuchfile.conf -r $IN install $FEDORAEXTRAS/4/$i/" "$IN.LOG"
        vecho "Updating to $FEDORANIGHTLY/$i + $FEDORAEXTRAS/development/$i"
        run "$PYRPMYUM -v -c /etc/nosuchfile.conf -r $IN update $FEDORANIGHTLY/$i/Fedora/RPMS/ $FEDORAEXTRAS/development/$i" "$IN.LOG"
        cleanchroot $IN
    done
}

function fc4extrastodeveloldrpms() {
# check for leftover rpms FC4 + FE4 / update to development
    FC4=
    if [ -d "$FEDORARELEASED/4" ]; then
        FC4=$FEDORARELEASED/4
    elif [ -d "$FEDORARELEASED/FC-4/GOLD" ]; then
        FC4=$FEDORARELEASED/FC-4/GOLD
    fi
    if [ -z "$FC4" ]; then
        vecho "no FC4 directory found, skipping $FUNCNAME check"
        return
    fi
    if [ -z "$FEDORAEXTRAS" -o ! -d "$FEDORAEXTRAS/4" ]; then
        vecho "no FC4 Extras directory found, skipping $FUNCNAME check"
        return
    fi
    if [ -z "$FEDORANIGHTLY" -o ! -d "$FEDORANIGHTLY" ]; then
        vecho "no Rawhide directory found, skipping $FUNCNAME check"
        return
    fi
    for i in $INSTALLARCHS; do
        if [ ! -d "$FC4/$i/os" ]; then
            vecho "no FC4 repository for $i found, skipping"
            continue
        fi
        if [ ! -d "$FEDORANIGHTLY/$i" ]; then
            vecho "no Rawhide repository for $i found, skipping"
            continue
        fi
        if [ ! -d "$FEDORAEXTRAS/4/$i" ]; then
            vecho "no FC4 Extras repository for $i found, skipping"
            continue
        fi
        if [ ! -d "$FEDORAEXTRAS/development/$i" ]; then
            vecho "no Rawhide Extras for $i found, skipping"
            continue
        fi
        IN=$DATA/$FUNCNAME-$i
        vecho "Running $FUNCNAME on $FC4/$i/os, $FEDORAEXTRAS/4/$i, $FEDORANIGHTLY/$i and $FEDORAEXTRAS/development/$i"
        run "$CHECKUPDATE -c /etc/nosuchfile.conf -r $IN install $FC4/$i/os/Fedora/RPMS $FEDORAEXTRAS/4/$i update $FEDORANIGHTLY/$i/Fedora/RPMS/ $FEDORAEXTRAS/development/$i" "$IN.LOG"
    done
}

function develextrasrandomizer() {
# randomizer FCdevel+FE install checks with --justdb
# can run on any arch because no pre/post commands are executed
    iter=1000
    if [ -n "$ITERATIONS" ]; then
        iter=$ITERATIONS
    fi
    if [ -n "$FEDORANIGHTLY" -a -d "$FEDORANIGHTLY" -a -n "$FEDORAEXTRAS" -a -d "$FEDORAEXTRAS" ]; then
        cd $FEDORANIGHTLY
        archdirs=`echo *`
        cd - >/dev/null
        for i in $archdirs; do
            if [ "$i" == "SRPMS" -o ! -d "$FEDORANIGHTLY/$i" -o "${i/logs/}" != "$i" ]; then
                continue
            fi
            if [ ! -d "$FEDORAEXTRAS/development/$i" ]; then
                vecho "no devel-Extras repository for $i found, skipping"
            fi
            IN=$DATA/$FUNCNAME-$i
            cleanchroot $IN
            mkdir -p "$IN/var/lib/rpm"
            vecho "Running $FUNCNAME on $FEDORANIGHTLY/$i and $FEDORAEXTRAS/development/$i"
            if [ "$i" == "i386" ]; then
                instarch=i686
            else
                instarch=$i
            fi
            run "$RANDOMIZER --arch $instarch -c /etc/nosuchfile.conf -r $IN $iter $FEDORANIGHTLY/$i/Fedora/RPMS/ $FEDORAEXTRAS/development/$i" "$IN.log"
            rm -rf "$IN/var"
        done
    fi
}

function rheldepency() {
# dependency install checks with --test
# can run on any arch because no pre/post commands are executed
# run with -p <path> on a specific tree or without -p to look for
# current (this day) trees under /mnt/redhat/rel-eng/RHEL(3,4)-U(X)-re`date +%m%d`'
    if [ -n "$RHELPATH" -a -d "$RHELPATH" ]; then
        IN=$DATA/$FUNCNAME
        run "$PYRPMYUM --test -c /etc/nosuchfile.conf -r $IN install $RHELPATH/RedHat/RPMS/" "$IN.log"
        return
    fi
    if [ "$LOCATION" != "develrdu" ]; then
        echo "trees not available in Stuttgart, skipping $FUNCNAME"
        return
    fi
    if [ -n "$RHELRELENG" -a -d "$RHELRELENG" ]; then
        for dist in RHEL3 RHEL4; do
            for update in U10 U9 U8 U7 U6 U5 U4 U3 U2 U1 GOLD; do
                rheldir="$RHELRELENG/$dist-$update-re`date +%m%d`"
                rheldir=`/bin/ls -1trd ${rheldir}* 2>/dev/null | tail -1`
                if [ -n "$rheldir" ]; then
                    break
                fi
            done
            if [ -z "$rheldir" ]; then
                continue
            fi
            cd $rheldir
            archdirs=`echo *`
            cd - >/dev/null
            for i in $archdirs; do
                if [ "$i" == "SRPMS" -o "$i" == "isos" -o ! -d "$rheldir/$i" -o "${i/logs/}" != "$i" -o ! -d "$rheldir/$i/$i-AS" ]; then
                    continue
                fi
                IN=$DATA/$FUNCNAME-$i
                echo "Running $FUNCNAME on $rheldir/$i/$i-AS"
                if [ "$i" == "i386" ]; then
                    instarch=i686
                else
                    instarch=$i
                fi
                run "$PYRPMYUM --test --arch $instarch -c /etc/nosuchfile.conf -r $IN install $rheldir/$i/$i-AS/RedHat/RPMS/" "$IN.log"
            done
        done
    fi
}

function rhelXuXtoreleng() {
# install RHEL(x) last QU and update to latest rel-eng tree
# skip if run in Stuttgart and no path (-p) to rel-eng tree is given
    if [ "$LOCATION" != "develrdu" ]; then
        if [ -n "$RHELPATH" -a -d "$RHELPATH" ]; then
            relengdir="$RHELPATH"
            installarch=`rpm -qp --qf "%{arch}\n" $relengdir/RedHat/RPMS/initscripts* 2>/dev/null`
            if [ -z "$installarch" ]; then
                echo "could not determine architecture of $relengdir for $FUNCNAME, skipping"
                return
            fi
            dist=${relengdir/*RHEL/}
            dist=${dist/*rhel/}
            if [ "${dist:0:1}" == "-" ]; then
                dist="${dist:1}"
            fi
            if [ "${dist:0:1}" == "3" ]; then
                dist="RHEL-3"
            elif [ "${dist:0:1}" == "4" ]; then
                dist="RHEL-4"
            else
                vecho "cannot determine if $RHELPATH is a RHEL-3 or a RHEL-4 tree"
                return
            fi
            if [ -n "$RHELRELEASED" -a -d "$RHELRELEASED" ]; then
                for update in U10 U9 U8 U7 U6 U5 U4 U3 U2 U1 GOLD; do
                    if [ -d "$RHELRELEASED/$dist/$update/AS/$installarch/tree" ]; then
                        rheldir="$RHELRELEASED/$dist/$update/AS/$installarch/tree"
                        break
                    fi
                done
                if [ -z "$rheldir" ]; then
                    vecho "no $dist-update directory found, skipping"
                    continue
                fi
                IN="$DATA/$FUNCNAME-$installarch"
                vecho "Running $FUNCNAME on $rheldir and $relengdir"
                doinstall --nodev $rheldir/RedHat/RPMS $IN
                run "$PYRPMYUM -v -c /etc/nosuchfile.conf -r $IN update $relengdir/RedHat/RPMS/" "$IN.LOG"
                cleanchroot $IN
            fi
        else
            echo "cannot run outside RDU without a path (-p) to the rel-eng tree"
            return
        fi
    else
        if [ -n "$RHELRELEASED" -a -d "$RHELRELEASED" ]; then
            for dist in RHEL-3 RHEL-4; do
                for update in U10 U9 U8 U7 U6 U5 U4 U3 U2 U1 GOLD; do
                    if [ -d "$RHELRELEASED/$dist/$update/AS" ]; then
                        rheldir="$RHELRELEASED/$dist/$update/AS"
                        break
                    fi
                done
                if [ -z "$rheldir" ]; then
                    vecho "no $dist-update directory found, skipping"
                    continue
                fi
                if [ -n "$RHELRELENG" -a -d "$RHELRELENG" ]; then
                    for update in U10 U9 U8 U7 U6 U5 U4 U3 U2 U1 GOLD; do
                        relengdir="$RHELRELENG/${dist/-/}-$update-re`date +%m%d`"
                        relengdir=`/bin/ls -1trd ${relengdir}* 2>/dev/null | tail -1`
                        if [ -n "$relengdir" ]; then
                            break
                        fi
                    done
                    if [ -z "$relengdir" ]; then
                        continue
                    fi
                    for i in $INSTALLARCHS; do
                        if [ ! -d "$rheldir/$i" -o ! -d "$relengdir/$i/$i-AS" ]; then
                            continue
                        fi
                        IN="$DATA/$FUNCNAME-$installarch-`basename $relengdir`"
                        vecho "Running $FUNCNAME on $rheldir and $relengdir"
                        doinstall --nodev $rheldir/$i/RedHat/RPMS $IN
                        run "$PYRPMYUM -v -c /etc/nosuchfile.conf -r $IN update $relengdir/$i/$i-AS/RedHat/RPMS/" "$IN.LOG"
                        cleanchroot $IN
                    done
                fi
            done
        fi
    fi
}

function rhelrelengrandomizer() {
# randomizer RHEL-rel-eng install checks with --justdb
# can run on any arch because no pre/post commands are executed
    iter=1000
    if [ -n "$ITERATIONS" ]; then
        iter=$ITERATIONS
    fi
    if [ -n "$RHELPATH" -a -d "$RHELPATH" ]; then
        IN=$DATA/$FUNCNAME
        installarch=`rpm -qp --qf "%{arch}\n" $RHELPATH/RedHat/RPMS/initscripts* 2>/dev/null`
        if [ -z "$installarch" ]; then
            echo "could not determine architecture of $RHELPATH for $FUNCNAME, skipping"
            return
        fi
        cleanchroot $IN
        mkdir -p "$IN/var/lib/rpm"
        vecho "Running $FUNCNAME on $RHELPATH"
        run "$RANDOMIZER --arch $installarch -c /etc/nosuchfile.conf -r $IN $iter $RHELPATH/RedHat/RPMS/" "$IN.log"
        rm -rf "$IN/var"
        return
    fi
    if [ -n "$RHELRELENG" -a -d "$RHELRELENG" ]; then
        for dist in RHEL3 RHEL4; do
            for update in U10 U9 U8 U7 U6 U5 U4 U3 U2 U1 GOLD; do
                relengdir="$RHELRELENG/${dist/-/}-$update-re`date +%m%d`"
                relengdir=`/bin/ls -1trd ${relengdir}* 2>/dev/null | tail -1`
                if [ -n "$relengdir" ]; then
                    break
                fi
            done
            if [ -z "$relengdir" ]; then
                continue
            fi
            cd $relengdir
            archdirs=`echo *`
            cd - >/dev/null
            for i in $archdirs; do
                if [ "$i" == "SRPMS" -o "$i" == "isos" -o ! -d "$relengdir/$i/$i" -o "${i/logs/}" != "$i" ]; then
                    continue
                fi
                IN="$DATA/$FUNCNAME-$i-`basename $relengdir`"
                cleanchroot $IN
                mkdir -p "$IN/var/lib/rpm"
                vecho "Running $FUNCNAME on $relengdir/$i/$i"
                if [ "$i" == "i386" ]; then
                    instarch=i686
                else
                    instarch=$i
                fi
                run "$RANDOMIZER --arch $instarch -c /etc/nosuchfile.conf -r $IN $iter $relengdir/$i/$i/RedHat/RPMS/" "$IN.log"
                rm -rf "$IN/var"
            done
        done
    fi
}

DATA=/mnt/data/karsten

LOG=$DATA/LOG

while getopts ':i:p:dfhrtvw' OPTION ; do
    case $OPTION in
        v)        VERBOSE=y
                  ;;
        t)        TESTONLY=y
                  VERBOSE=y
                  ;;
        d)        DAILY=y
                  ;;
        w)        WEEKLY=y
                  ;;
        r)        RUNRHEL=y
                  ;;
        f)        RUNFEDORA=y
                  ;;
        i)        ITERATIONS="$OPTARG"
                  ;;
        p)        RHELPATH="$OPTARG"
                  ;;
        h)        usage $EXIT_SUCCESS
                  ;;
        :)        echo "Option \"-$OPTARG\" benötigt ein Argument." >&2
                  usage $EXIT_ERROR
                  ;;
        *)        echo "Unbekannte Option \"-$OPTARG\"." >&2
                  usage $EXIT_ERROR
                  ;;
    esac
done
# Verbrauchte Argumente überspringen
shift $((OPTIND - 1))

if [ "$VERBOSE" == "y" ]; then
  QUIET=""
else
  QUIET="--quiet"
fi

if [ -z "$RUNFEDORA" -a -z "$RUNRHEL" ]; then
    RUNFEDORA=y
    RUNRHEL=y
fi

PYRPMYUM="./pyrpmyum --nosignature --ignoresize -y --autoerase --servicehack $QUIET"
CHECKUPDATE="./pyrpmcheckrepo --ignoresize --nosignature --test $QUIET"
RANDOMIZER="./pyrpmrandomizer --ignoresize --nosignature -y --justdb $QUIET"

# Daily checks, but where should rawhideextrasdepencycheck run ? 
# There's no FE mirror in RDU and no nightly mirror in STR:
if [ "$DAILY" == "y" ]; then
    if [ "$RUNFEDORA" == "y" ]; then
        #rawhidedepency
        #rawhideextrasdepency
        fc4extrastodeveloldrpms
        #echo "no daily Fedora checks available"
    fi
    if [ "$RUNRHEL" == "y" ]; then
        rheldepency
        #echo "no daily RHEL checks available"
    fi
fi

# Weekly checks, these might take a looong time to finish:
if [ "$WEEKLY" == "y" ]; then
    if [ "$RUNFEDORA" == "y" ]; then
        #fc4todevelupdate
        #fc4extrastodevelupdate
        develextrasrandomizer
    fi
    if [ "$RUNRHEL" == "y" ]; then
        #rhelXuXtoreleng
        rhelrelengrandomizer
    fi
fi
# vim:ts=4:sw=4:showmatch:expandtab
